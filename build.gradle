plugins {
    id 'org.springframework.boot' version '2.1.8.RELEASE'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'com.bmuschko.docker-spring-boot-application' version '6.1.3'
}

allprojects{
    group = 'com.alsyun'
    version = '1.0.1-SNAPSHOT'
    apply plugin:'io.spring.dependency-management'

    repositories {
        maven {
            url "http://repo.mycompany.com/maven2"
        }
        maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }

    ext{
        set('springBootVersion', "2.1.8.RELEASE")
        set('mysql_version','8.0.11')
        set('mybatis','2.1.4')
        set('mybatis_generator_version','1.4.0')
        set('mybatis_dynamic_sql_version','1.1.4')
        set('pagehelper_version','1.2.5')
        set('orderbyhelper_version','1.0.2')
        set('commons_lang3_version','3.4')
        set('jjwt_version','0.9.0')
        set('elasticsearch_version>','7.9.3')
        set('jest_version','6.3.1')
        set('redis_version','1.4.1.RELEASE')
        set('redisson_version','3.12.5')
        set('sharding_jdbc_version','3.0.0')
        set('aliyun_sdk_oss_version','2.4.0')
        set('commons_fileupload_version','1.3.1')
        set('fastdfs_client_version','1.26.1-RELEASE')
        set('alipay_sdk_java_version','4.9.153.ALL')
        set('xxyopen_version','1.0.0')
    }
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
        }
        dependencies {
            dependency "org.springframework.boot:spring-boot-starter-undertow:${springBootVersion}"
            dependency 'org.projectlombok:lombok:1.18.24'
            dependency "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
            dependency "org.springframework.boot:spring-boot-test:${springBootVersion}"

            dependency "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"
            dependency "org.springframework.boot:spring-boot-starter-cache:${springBootVersion}"
            dependency "org.springframework.boot:spring-boot-starter-redis:${redis_version}"
            dependency "mysql:mysql-connector-java:${mysql_version}"
            dependency "org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatis}"
            dependency "io.shardingsphere:sharding-jdbc-spring-boot-starter:${sharding_jdbc_version}"
            dependency "io.shardingsphere:sharding-jdbc-spring-namespace:${sharding_jdbc_version}"
            dependency "com.github.pagehelper:pagehelper-spring-boot-starter:${pagehelper_version}"
            dependency "com.cuisongliu:orderbyhelper-spring-boot-starter:${orderbyhelper_version}"
            dependency "org.apache.commons:commons-lang3:${commons_lang3_version}"
            dependency "org.apache.httpcomponents:httpclient:4.5.2"
            dependency "org.mybatis.dynamic-sql:mybatis-dynamic-sql:${mybatis_dynamic_sql_version}"
            dependency "org.mybatis.generator:mybatis-generator-core:${mybatis_generator_version}"
            dependency "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
            dependency "io.github.xxyopen:xxy-model:${xxyopen_version}"
            dependency "io.github.xxyopen:xxy-web:${xxyopen_version}"
            dependency "io.github.xxyopen:xxy-util:${xxyopen_version}"

        }
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    configurations {
        compileOnly{
            extendsFrom annotationProcessor
        }
    }
    dependencies {
        implementation 'org.projectlombok:lombok:1.18.8'
        implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    }

    test{
        useJUnitPlatform()
        ignoreFailures =true
    }

    /**
     * 添加jacoco测试覆盖率
     */
    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled true
            html.enabled true

            xml.destination file("${buildDir}/jacoco/coverage-reports/jacoco.xml")
            csv.destination file("${buildDir}/jacoco/coverage-reports/jacoco.csv")
            html.destination file("${buildDir}/jacoco/coverage-reports/html")
        }
    }
    tasks.check.dependsOn jacocoTestReport

    /**
     * clean 命令时删除 logs 目录
     */
/*    task cleanOutDir(type: Delete) {
        group("delete")
        delete "${projectDir}/cattery-logs/"
        delete "${rootDir}/cattery-logs/"
    }
    tasks.clean.dependsOn(cleanOutDir)*/

    /**
     * clean 命令时删除 build 目录
     */
    task cleanBuildDir(type: Delete) {
        group("delete")
        delete "${projectDir}/build"
        delete "${projectDir}/out"
    }
    tasks.clean.dependsOn(cleanBuildDir)
}